<ProxyEndpoint name="endpoint1">

  <HTTPProxyConnection>
    <BasePath>{{= basepath}}</BasePath>
    <Properties/>
    <VirtualHost>secure</VirtualHost>
  </HTTPProxyConnection>

  <FaultRules/>
  <DefaultFaultRule name="default-fault-rule">
    <Step>
      <Name>AM-Inject-Proxy-Revision-Header</Name>
    </Step>
    <AlwaysEnforce>true</AlwaysEnforce>
  </DefaultFaultRule>

  <PreFlow name="PreFlow">
    <Request>
      <Step>
        <Name>RF-Missing-Account-Num</Name>
        <Condition>request.header.account-num = null</Condition>
      </Step>
    </Request>
    <Response/>
  </PreFlow>

  <PostFlow name="PostFlow">
    <Request/>
    <Response>
      <Step>
        <Name>Quota-on-Slots</Name>
        <Condition>transactionCost != null AND transactionCost != ""</Condition>
      </Step>
      <Step>
        <Name>JS-Convert-Response</Name>
      </Step>
      <Step>
        <Name>AM-Inject-Proxy-Revision-Header</Name>
      </Step>
    </Response>
  </PostFlow>

  <PostClientFlow name="PostFlow">
    <Request/>
    <Response>
    </Response>
  </PostClientFlow>

  <Flows>

    <!-- There is one flow for each item in the config. -->
    {{
    flows.forEach( (flow,ix) => {
      let amPolicyName = 'AM-PreparedQuery-' + (ix+1);
      let d = path.dirname(sourceFilename),
            fqPolicyFileName = path.resolve(d, '..', 'policies', amPolicyName + '.xml');
            content = `<AssignMessage name='${amPolicyName}'>\n` +
          "  <AssignVariable>\n"+
          "    <Name>bq_query</Name>\n" +
          `    <Template>${flow.query}</Template>\n`+
          "  </AssignVariable>\n" +
          "</AssignMessage>";
        fs.writeFileSync(fqPolicyFileName, content);
    }}
    <Flow name="{{= flow.name}}">
      <Request>
        <Step>
          <Name>Quota-Precheck</Name>
        </Step>
        {{
        if (flow.path.indexOf('*')>0) {
        // the query is parameterized, extract the fields
        let evPolicyName = 'EV-PathParams-' + (ix+1),
            fqPolicyFileName = path.resolve(d, '..', 'policies', evPolicyName + '.xml');
        let c = 1;
        let pathspec = flow.path.split('\/').map( function(token) {
            return (token == '*') ? '{param' + (c++) + '}' : token;
        }).join('/');
        let content =
        `<ExtractVariables name='${evPolicyName}'>\n` +
        '  <Source>request</Source>\n' +
        '  <URIPath>\n' +
        `    <Pattern ignoreCase="true">${pathspec}</Pattern>\n` +
        '  </URIPath>\n' +
        '  <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n' +
        '</ExtractVariables>\n';
        fs.writeFileSync(fqPolicyFileName, content);
        }}
        <Step>
          <Name>{{=evPolicyName}}</Name>
        </Step>
        {{ } }}
        <Step>
          <Name>{{=amPolicyName}}</Name>
        </Step>
      </Request>
      <Response>
      </Response>
      <Condition>proxy.pathsuffix MatchesPath "{{= flow.path}}" and request.verb = "GET"</Condition>
    </Flow>
    {{ });    }}

    <Flow name="unknown request">
      <Request>
        <Step>
          <Name>RF-Unknown-Request</Name>
        </Step>
      </Request>
      <Response>
      </Response>
    </Flow>

  </Flows>

  <RouteRule name="default">
    <TargetEndpoint>target-1</TargetEndpoint>
  </RouteRule>

</ProxyEndpoint>
