<ProxyEndpoint name="endpoint1">

  <HTTPProxyConnection>
    <BasePath>{{= basepath}}</BasePath>
    <Properties/>
    <VirtualHost>secure</VirtualHost>
  </HTTPProxyConnection>

  <FaultRules/>
  <DefaultFaultRule name="default-fault-rule">
    <Step>
      <Name>AM-Inject-Apigee-Source-Header</Name>
    </Step>
    <AlwaysEnforce>true</AlwaysEnforce>
  </DefaultFaultRule>

  <PreFlow name="PreFlow">
    <Request>
    </Request>
    <Response/>
  </PreFlow>

  <PostFlow name="PostFlow">
    <Request/>
    <Response>
      <Step>
        <Name>JS-Convert-Response</Name>
      </Step>
      <Step>
        <Name>AM-Inject-Apigee-Source-Header</Name>
      </Step>
    </Response>
  </PostFlow>

  <PostClientFlow name="PostFlow">
    <Request/>
    <Response>
    </Response>
  </PostClientFlow>

  <Flows>

    <!-- there is one flow for each item in the config -->
    {{
    flows.forEach( (flow,ix) => {
      let amPolicyName = 'AM-PreparedQuery-' + (ix+1);
      let d = path.dirname(sourceFilename),
          fqAssignMessagePolicyFileName = path.resolve(d, '..', 'policies', amPolicyName + '.xml');
      let avContent1 =
          "  <AssignVariable>\n"+
          "    <Name>bq_query</Name>\n" +
          `    <Template>${flow.query}</Template>\n`+
          "  </AssignVariable>\n";
      let avContent2 = ''; /* will optionally hold another AssignVariable */
    }}

    <Flow name="{{= flow.name}}">
      <Request>
{{
        let pathPattern = '';
        // the query may have named parameters. Extract them. No possibility for SQL injection here.
        let re = new RegExp('{[_a-zA-Z][_a-zA-Z0-9]+}','g');
        let m = flow.path.match(re);
        if (m) {
          pathPattern = flow.path.replaceAll(re, '*');
          let evPolicyName = 'EV-PathParams-' + (ix+1),
              fqEvPolicyFileName = path.resolve(d, '..', 'policies', evPolicyName + '.xml');
          let evContent = `<ExtractVariables name='${evPolicyName}'>\n` +
            '  <Source>request</Source>\n' +
            '  <VariablePrefix>extracted</VariablePrefix>\n' +
            '  <URIPath>\n' +
            `    <Pattern ignoreCase="true">${flow.path}</Pattern>\n` +
            '  </URIPath>\n' +
            '  <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n' +
            '</ExtractVariables>\n';
          fs.writeFileSync(fqEvPolicyFileName, evContent);
          let queryParams = m.map( p => {
            let name = p.slice(1,-1);
            return {
              parameterType : { type : "STRING" },
              parameterValue : { value : "{" + `extracted.${name}`+ "}" },
              name
            };
          });
          if (flow['wildcard-params']) {
            // apply wildcards on each param as necessary
            avContent2 =
            flow['wildcard-params'].map(param =>
                "  <AssignVariable>\n" +
                "   \u003c" + "!-- apply wildcard to this var -->\n" +
                `    <Name>extracted.${param}</Name>\n` +
                "    <Template>%{" + `extracted.${param}` + "}%</Template>\n" +
                "  </AssignVariable>\n" )
                .join("");
          }
          avContent2 = avContent2 +
            "  <AssignVariable>\n" +
            "    <Name>query_parameters</Name>\n" +
            "    <Value>" + JSON.stringify(queryParams, null, 2) + "</Value>\n" +
            "  </AssignVariable>\n";

          // emit the ExtractVariables step
          print("    <Step>\n" +
              `      <Name>${evPolicyName}</Name>\n` +
              "    </Step>\n");
        }

        // the AssignMessage policy
        let amContent = `<AssignMessage name='${amPolicyName}'>\n` +
          avContent1 +
          avContent2 +
          "</AssignMessage>\n";

        fs.writeFileSync(fqAssignMessagePolicyFileName, amContent);
}}
        <Step>
          <Name>{{=amPolicyName}}</Name>
        </Step>
      </Request>
      <Response>
      </Response>
      <Condition>proxy.pathsuffix MatchesPath "{{= pathPattern}}" and request.verb = "GET"</Condition>
    </Flow>
    {{ });    }}

    <Flow name="unknown request">
      <Request>
        <Step>
          <Name>RF-Unknown-Request</Name>
        </Step>
      </Request>
      <Response>
      </Response>
    </Flow>

  </Flows>

  <RouteRule name="default">
    <TargetEndpoint>target-1</TargetEndpoint>
  </RouteRule>

</ProxyEndpoint>
